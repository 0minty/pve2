import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import time


token = "6430480724:AAGqJDjgjP1xSMex0T9YEo2HYbEKbQiWRfg"
bot = telebot.TeleBot(token)

admin_ids = [932038847,1074303708]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_status = {}
last_alert_click = {}


@bot.message_handler(func=lambda message: message.text == "–ì—Ä—É–ø–ø–∞ –≤ –í–ö \U0001F310")
def pab(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '<a href="https://vk.com/felazfortik"><u>–ü–∞–±–ª–∏–∫ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</u></a>', parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã \U00002709")
def adm(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "@FelazPlay (–í–∞–ª–µ–Ω—Ç–∏–Ω)\n@elpochkad (–§—ë–¥–æ—Ä)", parse_mode="HTML")

@bot.message_handler(commands=["start"])
def farm(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    button1 = types.KeyboardButton("–§–∞—Ä–º \U0001F4DD")
    button2 = types.KeyboardButton("–ê–ª–µ—Ä—Ç—ã \U0001F514")
    button3 = types.KeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã \U00002709")
    button4 = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –≤ –í–ö \U0001F310")


    markup.add(button1, button2 ,button3, button4)
    bot.send_message(chat_id, "üëã–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ñ–∞—Ä–º—É –í-–ë–∞–∫—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <u><i><b>–§–∞—Ä–º</b></i></u>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç",
                     reply_markup=markup, parse_mode="HTML")





questions = [
    "1) üìù–ö—Ç–æ —Ñ–∞—Ä–º–∏–ª:",
    "2) üìù–ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–∞—Ä–º–∏–ª–∏:",
    "3) üìù–ö–æ–ª-–≤–æ –Ω–∞—Ñ–∞—Ä–º–ª–µ–Ω–Ω—ã—Ö –í-–±–∞–∫—Å–æ–≤:"
]


def create_type_selection_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    button1 = types.KeyboardButton("–§–∞—Ä–º \U0001F4DD")
    button2 = types.KeyboardButton("–ê–ª–µ—Ä—Ç—ã \U0001F514")
    button3 = types.KeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã \U00002709")
    button4 = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –≤ –í–ö \U0001F310")

    markup.add(button1, button2, button3, button4)
    return markup


@bot.message_handler(func=lambda message: message.text == "–§–∞—Ä–º \U0001F4DD")
def start_farm(message):
    chat_id = message.chat.id
    user_status[chat_id] = {'current_question': 0, 'answers': []}  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_next_question(chat_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
def cancel_farm(message):
    chat_id = message.chat.id
    user_status.pop(chat_id, None)
    reply_markup = create_type_selection_keyboard()
    bot.send_message(chat_id, "‚ö†Ô∏è–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=reply_markup)




@bot.message_handler(func=lambda message: user_status.get(message.chat.id, {}).get('current_question') is not None, content_types=['text'])
def handle_farm_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    username = message.from_user.username
    user_info = f"@{username} ({user_name})"
    text = message.text
    current_question = user_status[chat_id]['current_question']
    answers = user_status[chat_id].get('answers', [])

    if current_question < len(questions):
        answers.append(text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        current_question += 1

        if current_question < len(questions):
            user_status[chat_id]['current_question'] = current_question
            user_status[chat_id]['answers'] = answers
            send_next_question(chat_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        else:
            user_status.pop(chat_id)
            send_application_to_admins(chat_id, user_info, answers)
    else:
        user_status.pop(chat_id)
        send_application_to_admins(chat_id, user_info, text)


def send_next_question(chat_id):
    current_question = user_status[chat_id]['current_question']
    question = questions[current_question]
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    button1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    reply_markup.add(button1)
    bot.send_message(chat_id, question, reply_markup=reply_markup, parse_mode="HTML")


def send_application_to_admins(chat_id, user_info, answers):
    application_text = "\n".join([f"{questions[i]} {answers[i]}" for i in range(len(questions))])
    utc_time = time.gmtime()
    utc_time_plus_3 = time.mktime(utc_time) + 3 * 3600
    formatted_time = time.strftime('%d.%m.%Y %H:%M', time.localtime(utc_time_plus_3))

    application_text = f"{application_text}\n\n–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {formatted_time} –ú–°–ö"

    for admin_id in admin_ids:
        bot.send_message(admin_id, f"–§–∞—Ä–º–µ—Ä: {user_info} –Ω–∞–ø–∏—Å–∞–ª:\n{application_text}", parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
    bot.send_message(chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                     reply_markup=create_type_selection_keyboard())






@bot.message_handler(func=lambda message: message.text == "–ê–ª–µ—Ä—Ç—ã \U0001F514")
def aler(message):
    user_id = message.chat.id
    last_click_time = last_alert_click.get(user_id)
    bot.send_message(message.chat.id,"‚öôÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    if not last_click_time or (time.time() - last_click_time) >= 600:
        url = "https://stw-planner.com"
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            missions = soup.find_all('div', class_='mission-entry')


            if len(missions) == 0:
                bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤",reply_markup=create_type_selection_keyboard())
            else:
                for mission in missions:
                    title = mission.find('div', class_='mission-details').text.strip()
                    mission_pl = mission.find("div", class_="mission-pl").text.strip()
                    mis_backs = mission.find("div", class_="mission-reward-name").text.strip()
                    mission_info = f"{mission_pl} –º–æ—â—å\n{mis_backs} –í-–±–∞–∫—Å–æ–≤"

                    bot.send_message(message.chat.id, f"üå©<i>{title}\n{mission_info}</i>", parse_mode="HTML",reply_markup=create_type_selection_keyboard())


        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        last_alert_click[user_id] = time.time()
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ <i><b>10</b></i> –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ <i><b>–ê–ª–µ—Ä—Ç—ã</b></i>",
                         parse_mode="HTML",reply_markup=create_type_selection_keyboard())


@bot.message_handler(func=lambda message: 1)
def mes(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "‚ùóÔ∏è–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",reply_markup=create_type_selection_keyboard())

bot.polling()